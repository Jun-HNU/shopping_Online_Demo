1.如何确定可以使用动态规划来求解问题

通常我们要从「有无后效性」进行入手分析。

如果对于某个状态，我们可以只关注状态的值，而不需要关注状态是如何转移过来的话，那么
这就是一个无后效性的问题，可以考虑使用 DP 解决。

另外一个更加实在的技巧，我们还可以通过 数据范围 来猜测是不是可以用 DP 来做。

因为 DP 是一个递推的过程，因此如果数据范围是 10^510
5
 ~10^610
6
  的话，可以考虑是不是可以使用一维 DP 来解决；如果数据范围是 10^210
2
 ~10^310
3
  的话，可以考虑是不是可以使用二维 DP 来做 ...

更加的学术表达是：当前某个状态确定后，之后的状态转移与之前的决策无关
无后效性」的定义：我们转移某个状态需要用到某个值，但是并不关心该值是如何而来的。


2.如何确定本题的状态定义

如何确定状态转移方程

对状态转移的要求是什么

如何分析动态规划的时间复杂度




当我们只关注一个状态的值，而不关注这个状态是怎么转移过来的，
那么就是一个无后效性的问题可采用DP
a)枚举基本case
b)确定状态转移的公式
c)确定边界问题。

对于累加问题，通常创建一个与给定的数组grid[]相同size的数组去记录历史累加值s[]。
并且这个数组的最后一个（行）元素s[n-1]，一般为我们要求的答案。
而递推公式一般类似为s[i]=grid[i]+fun(s[n-1])。
而有的题目甚至可以将自问简化，从而降低复杂度。

用一个二维数组来记录之前计算过的子问题，在后续逻辑中当再次出现
这个子问题时，直接从二维数组中取出值，可大大节省计算量。
对于关联二维数组两个元素的访问顺序问题，
可以通过创建一个一维数组，来记录。
一维数组的角标=二维数组元素角标计算得到的hash值
一维数组角标对应的值=后一个一个二维数组元素的角标计算得到的hash值。
上面的过程在遍历一维数组赋值完成后，再次遍历取出角标和元素，并解析出员二维数组的索引，
可以还原关联二维数组两个元素的访问顺序问题。


